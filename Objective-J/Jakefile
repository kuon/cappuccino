require('../jakelib/utils.js');

var BUILD_DIR = '../Build',
    ENVIRONMENTS = FILE.readdirSync('Environments'),
    sharedSources = new jake.FileList(),
    targets = [];


sharedSources.include('Source/*.js');
sharedSources = sharedSources.toArray();


// Create one set of tasks per environment per configuration
CONFIGURATIONS.forEach(function(configName)
{
    var finalBuildDir = BUILD_DIR + '/' + configName + '/Objective-J',
        intermediateBuildDir = BUILD_DIR + '/Objective-J.build/' + configName;

    recursiveDirectory(finalBuildDir);
    recursiveDirectory(intermediateBuildDir);

    ENVIRONMENTS.forEach(function(env)
    {
        if (!FILE.statSync('Environments/' + env).isDirectory())
            return;

        var source = 'Environments/' + env + '/Objective-J.' + env + '.js',
            envSources = new jake.FileList(),
            flags = ['-ISource',  '-IEnvironments/' + env],
            intermediateTarget = intermediateBuildDir + '/Objective-J.' + env + '.js',
            finalTarget = finalBuildDir + '/Objective-J.' + env + '.js';

        if (configName === 'Debug')
            flags.push('-DDEBUG');

        envSources.include('Environments/' + env + '/*');
        envSources = envSources.toArray();


        file(intermediateTarget, [intermediateBuildDir].concat(sharedSources).concat(envSources), function()
        {
            cpp(source, intermediateTarget, flags);
        }, {async: true});

        file(finalTarget, [intermediateTarget, finalBuildDir], function()
        {
            if (configName === 'Release')
                minify(intermediateTarget, finalTarget);
            else
                jake.cpR(intermediateTarget, finalTarget);
        });

        targets.push(finalTarget);

    });
});


desc('Build Objective-J');
task('default', targets, function()
{
    console.log('# Objective-J built');
});
