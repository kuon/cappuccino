require('../jakelib/utils.js');

var BUILD_DIR = '../Build',
    ENVIRONMENTS = FILE.readdirSync('Environments'),
    sharedSources = new jake.FileList(),
    targets = [];


sharedSources.include('Source/*.js');
sharedSources = sharedSources.toArray();


// Create one set of tasks per environment per configuration
CONFIGURATIONS.forEach(function(configName)
{
    var finalBuildDir = PATH.join(BUILD_DIR, configName, 'Objective-J'),
        intermediateBuildDir = PATH.join(BUILD_DIR, 'Objective-J.build', configName);

    recursiveDirectory(finalBuildDir);
    recursiveDirectory(intermediateBuildDir);

    ENVIRONMENTS.forEach(function(env)
    {
        if (!FILE.statSync(PATH.join('Environments', env)).isDirectory())
            return;

        var source = PATH.join('Environments', env, 'Objective-J.' + env + '.js'),
            envSources = new jake.FileList(),
            flags = ['-ISource', '-IEnvironments/' + env],
            intermediateTarget = PATH.join(intermediateBuildDir, 'Objective-J.' + env + '.js'),
            finalTarget = PATH.join(finalBuildDir, 'Objective-J.' + env + '.js');

        if (configName === 'Debug')
            flags.push('-DDEBUG');

        envSources.include('Environments/' + env + '/*');
        envSources = envSources.toArray();


        file(intermediateTarget, [intermediateBuildDir].concat(sharedSources).concat(envSources), function()
        {
            cpp(source, intermediateTarget, flags);
        }, {async: true});

        file(finalTarget, [intermediateTarget, finalBuildDir], function()
        {
            if (configName === 'Release')
                minify(intermediateTarget, finalTarget);
            else
                jake.cpR(intermediateTarget, finalTarget);
        });

        targets.push(finalTarget);

    });
    task(configName, targets, function()
    {
        jake.cpR('Tools', finalBuildDir);
        jake.cpR('package.json', finalBuildDir);
    });

});


task('npm-link', ['objective-j'], function()
{
    var cmd = 'cd ' + BUILD_DIR + '/Release/Objective-J/ && npm link';
    jake.exec([cmd], function()
    {
        console.log('[NPM LINK] Objective-J');
        complete();
    }, {stdout:true, stderr:true});
}, {async:true});

desc('Build Objective-J');
task('objective-j', CONFIGURATIONS);

task('default', ['objective-j', 'npm-link']);
